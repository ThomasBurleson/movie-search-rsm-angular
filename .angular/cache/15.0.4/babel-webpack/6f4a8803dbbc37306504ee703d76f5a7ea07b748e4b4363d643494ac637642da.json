{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { pluck } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/** A trivial data layer service that requests movies from a movie database API */\nexport class MoviesDataService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  searchByAuthor(term, date, author) {\n    term = `${term}&date=${date}&author=${author}`;\n    return this.searchMovies(term, 1);\n  }\n  searchMovies(term, page) {\n    const params = {\n      params: {\n        query: term,\n        page: page + 1\n      },\n      headers: {\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxMzUwN2ZiYmVkN2JkMjBiZTg3MTNjMTAyMTdiNDRlNCIsInN1YiI6IjYyY2YyNzhjNmRjNTA3MDA1NDY3ZGM3YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.gNrKzUpRaTHGeiKBTW_rAfq-HMy21rmxJiCBvrBllfY',\n        'Content-Type': 'application/json;charset=utf-8'\n      }\n    };\n    const request$ = this.httpClient.get('https://api.themoviedb.org/4/search/movie', params);\n    return request$.pipe(pluck('results'));\n  }\n}\nMoviesDataService.ɵfac = function MoviesDataService_Factory(t) {\n  return new (t || MoviesDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nMoviesDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MoviesDataService,\n  factory: MoviesDataService.ɵfac\n});","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,QAAQ,sBAAsB;AAEjD,SAASC,KAAK,QAAiB,MAAM;;;AAErC;AAEA,OAAM,MAAOC,iBAAiB;EAC5BC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;EAAe;EAE7CC,cAAc,CACZC,IAAY,EACZC,IAAY,EACZC,MAAc;IAEdF,IAAI,GAAG,GAAGA,IAAI,SAASC,IAAI,WAAWC,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACC,YAAY,CAAUH,IAAI,EAAE,CAAC,CAAC;EAC5C;EAEAG,YAAY,CAA0BH,IAAY,EAAEI,IAAY;IAC9D,MAAMC,MAAM,GAAG;MACbA,MAAM,EAAE;QAAEC,KAAK,EAAEN,IAAI;QAAEI,IAAI,EAAEA,IAAI,GAAG;MAAC,CAAE;MACvCG,OAAO,EAAE;QACPC,aAAa,EACX,4NAA4N;QAC9N,cAAc,EAAE;;KAEnB;IACD,MAAMC,QAAQ,GAAG,IAAI,CAACX,UAAU,CAACY,GAAG,CAClC,2CAA2C,EAC3CL,MAAM,CACP;IAED,OAAOI,QAAQ,CAACE,IAAI,CAAChB,KAAK,CAAC,SAAS,CAAC,CAAC;EACxC;;AA3BWC,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAgB,SAAjBhB,iBAAiB;AAAA","names":["HttpClient","pluck","MoviesDataService","constructor","httpClient","searchByAuthor","term","date","author","searchMovies","page","params","query","headers","Authorization","request$","get","pipe","factory"],"sourceRoot":"","sources":["/project/zustand-angular-movie-search/src/app/data-access/movies/movies.data-service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { pluck, tap, of } from 'rxjs';\n\n/** A trivial data layer service that requests movies from a movie database API */\n@Injectable()\nexport class MoviesDataService {\n  constructor(private httpClient: HttpClient) {}\n\n  searchByAuthor<TResult extends unknown>(\n    term: string,\n    date: string,\n    author: string\n  ) {\n    term = `${term}&date=${date}&author=${author}`;\n    return this.searchMovies<TResult>(term, 1);\n  }\n\n  searchMovies<TResult extends unknown>(term: string, page: number) {\n    const params = {\n      params: { query: term, page: page + 1 },\n      headers: {\n        Authorization:\n          'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxMzUwN2ZiYmVkN2JkMjBiZTg3MTNjMTAyMTdiNDRlNCIsInN1YiI6IjYyY2YyNzhjNmRjNTA3MDA1NDY3ZGM3YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.gNrKzUpRaTHGeiKBTW_rAfq-HMy21rmxJiCBvrBllfY',\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n    };\n    const request$ = this.httpClient.get<{ results: TResult }>(\n      'https://api.themoviedb.org/4/search/movie',\n      params\n    );\n\n    return request$.pipe(pluck('results'));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}