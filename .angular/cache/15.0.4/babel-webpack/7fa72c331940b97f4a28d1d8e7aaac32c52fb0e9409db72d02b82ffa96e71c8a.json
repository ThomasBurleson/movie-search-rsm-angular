{"ast":null,"code":"import _asyncToGenerator from \"/project/zustand-angular-movie-search/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport create from 'zustand/vanilla';\nimport { devtools, persist } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport { firstValueFrom, Observable } from 'rxjs';\nimport { MoviesDataService } from './movies.data-service';\nimport { initState } from './movies.model';\nimport { computeMatchedMovies } from './movies.filters';\nimport { computeWith } from '../utils/computed';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./movies.data-service\";\nexport class MoviesStore {\n  constructor(movieAPI) {\n    this.movieAPI = movieAPI;\n    this.vm$ = this.makeStore();\n  }\n  makeStore() {\n    const store = buildStoreEngine(this.movieAPI);\n    const {\n      loadMovies,\n      searchBy\n    } = store.getState();\n    loadMovies(searchBy);\n    return new Observable(subscriber => {\n      store.subscribe(vm => subscriber.next(vm));\n    });\n  }\n}\n// Create an instance of the Zustand store engine\nMoviesStore.ɵfac = function MoviesStore_Factory(t) {\n  return new (t || MoviesStore)(i0.ɵɵinject(i1.MoviesDataService));\n};\nMoviesStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MoviesStore,\n  factory: MoviesStore.ɵfac\n});\nfunction buildStoreEngine(movieAPI) {\n  /**\n   * Calculate/build our derived/computed properties\n   */\n  const buildComputedFn = ({\n    allMovies,\n    filterBy\n  }) => {\n    const filteredMovies = computeMatchedMovies({\n      allMovies,\n      filterBy\n    });\n    return {\n      filteredMovies\n    };\n  };\n  /**\n   * Build a State/API store\n   */\n  const buildStoreFn = (set, get, store) => {\n    set = computeWith(buildComputedFn, store);\n    const data = initState();\n    const api = {\n      // Load movies based on searchBy and page\n      loadMovies: function () {\n        var _ref = _asyncToGenerator(function* (searchBy, page = 1) {\n          const request$ = movieAPI.searchMovies(searchBy, page);\n          const allMovies = yield firstValueFrom(request$);\n          set({\n            allMovies,\n            searchBy\n          });\n          return true;\n        });\n        return function loadMovies(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      // Filter movies and highlight matching text\n      updateFilter: filterBy => {\n        set({\n          filterBy\n        });\n      },\n      // Show all available movies\n      clearFilter: () => {\n        set({\n          filterBy: ''\n        });\n      }\n    };\n    // For us, a store state is both 'data' + 'api'\n    return {\n      ...data,\n      ...api,\n      ...buildComputedFn(data)\n    };\n  };\n  // Return entire MovieViewModel\n  return create()(\n  // prettier-ignore\n  devtools(persist(immer(buildStoreFn), {\n    name: 'movieSearch'\n  }), {\n    name: 'movieSearch'\n  }));\n}","map":{"version":3,"mappings":";AAAA,OAAOA,MAAM,MAAM,iBAAiB;AAEpC,SAASC,QAAQ,EAAEC,OAAO,QAAQ,oBAAoB;AACtD,SAASC,KAAK,QAAQ,0BAA0B;AAGhD,SAASC,cAAc,EAAEC,UAAU,QAAQ,MAAM;AACjD,SAASC,iBAAiB,QAAQ,uBAAuB;AACzD,SACEC,SAAS,QAOJ,gBAAgB;AACvB,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,SAASC,WAAW,QAAQ,mBAAmB;;;AAG/C,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,QAA2B;IAA3B,aAAQ,GAARA,QAAQ;IAC1B,IAAI,CAACC,GAAG,GAAG,IAAI,CAACC,SAAS,EAAE;EAC7B;EAEQA,SAAS;IACf,MAAMC,KAAK,GAA6BC,gBAAgB,CAAC,IAAI,CAACJ,QAAQ,CAAC;IACvE,MAAM;MAAEK,UAAU;MAAEC;IAAQ,CAAE,GAAGH,KAAK,CAACI,QAAQ,EAAE;IAEjDF,UAAU,CAACC,QAAQ,CAAC;IAEpB,OAAO,IAAIb,UAAU,CAAEe,UAAU,IAAI;MACnCL,KAAK,CAACM,SAAS,CAAEC,EAAkB,IAAKF,UAAU,CAACG,IAAI,CAACD,EAAE,CAAC,CAAC;IAC9D,CAAC,CAAC;EACJ;;AAGF;AAnBaZ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAc,SAAXd,WAAW;AAAA;AAoBxB,SAASM,gBAAgB,CACvBJ,QAA2B;EAE3B;;;EAGA,MAAMa,eAAe,GAAG,CAAC;IACvBC,SAAS;IACTC;EAAQ,CACmB,KAAwB;IACnD,MAAMC,cAAc,GAAGpB,oBAAoB,CAAC;MAAEkB,SAAS;MAAEC;IAAQ,CAAE,CAAC;IACpE,OAAO;MAAEC;IAAc,CAAE;EAC3B,CAAC;EAED;;;EAGA,MAAMC,YAAY,GAAG,CAACC,GAAG,EAAEC,GAAG,EAAEhB,KAAK,KAAoB;IACvDe,GAAG,GAAGrB,WAAW,CAAiBgB,eAAe,EAAEV,KAAK,CAAC;IAEzD,MAAMiB,IAAI,GAAezB,SAAS,EAAE;IACpC,MAAM0B,GAAG,GAAa;MACpB;MACAhB,UAAU;QAAA,6BAAE,WAAOC,QAAgB,EAAEgB,IAAI,GAAG,CAAC,EAAsB;UACjE,MAAMC,QAAQ,GAAGvB,QAAQ,CAACwB,YAAY,CAAclB,QAAQ,EAAEgB,IAAI,CAAC;UACnE,MAAMR,SAAS,SAAStB,cAAc,CAAC+B,QAAQ,CAAC;UAEhDL,GAAG,CAAC;YAAEJ,SAAS;YAAER;UAAQ,CAAE,CAAC;UAC5B,OAAO,IAAI;QACb,CAAC;QAAA;UAAA;QAAA;MAAA;MACD;MACAmB,YAAY,EAAGV,QAAgB,IAAI;QACjCG,GAAG,CAAC;UAAEH;QAAQ,CAAE,CAAC;MACnB,CAAC;MACD;MACAW,WAAW,EAAE,MAAK;QAChBR,GAAG,CAAC;UAAEH,QAAQ,EAAE;QAAE,CAAE,CAAC;MACvB;KACD;IAED;IACA,OAAO;MACL,GAAGK,IAAI;MACP,GAAGC,GAAG;MACN,GAAGR,eAAe,CAACO,IAAI;KACxB;EACH,CAAC;EAED;EACA,OAAOhC,MAAM,EAAkB;EAC7B;EACAC,QAAQ,CACNC,OAAO,CACLC,KAAK,CAAC0B,YAAY,CAAC,EACnB;IAAEU,IAAI,EAAE;EAAa,CAAE,CACxB,EACD;IAAEA,IAAI,EAAE;EAAa,CAAE,CACxB,CACF;AACH","names":["create","devtools","persist","immer","firstValueFrom","Observable","MoviesDataService","initState","computeMatchedMovies","computeWith","MoviesStore","constructor","movieAPI","vm$","makeStore","store","buildStoreEngine","loadMovies","searchBy","getState","subscriber","subscribe","vm","next","factory","buildComputedFn","allMovies","filterBy","filteredMovies","buildStoreFn","set","get","data","api","page","request$","searchMovies","updateFilter","clearFilter","name"],"sourceRoot":"","sources":["/project/zustand-angular-movie-search/src/app/data-access/movies/movies.store.ts"],"sourcesContent":["import create from 'zustand/vanilla';\nimport { StoreApi } from 'zustand/vanilla';\nimport { devtools, persist } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\n\nimport { Injectable } from '@angular/core';\nimport { firstValueFrom, Observable } from 'rxjs';\nimport { MoviesDataService } from './movies.data-service';\nimport {\n  initState,\n  MovieAPI,\n  MovieState,\n  MovieViewModel,\n  MovieComputedState,\n  MovieItem,\n  MovieStateWithAPI,\n} from './movies.model';\nimport { computeMatchedMovies } from './movies.filters';\nimport { computeWith } from '../utils/computed';\n\n@Injectable()\nexport class MoviesStore {\n  vm$: Observable<MovieViewModel>;\n\n  constructor(private movieAPI: MoviesDataService) {\n    this.vm$ = this.makeStore();\n  }\n\n  private makeStore(): Observable<MovieViewModel> {\n    const store: StoreApi<MovieViewModel> = buildStoreEngine(this.movieAPI);\n    const { loadMovies, searchBy } = store.getState();\n\n    loadMovies(searchBy);\n\n    return new Observable((subscriber) => {\n      store.subscribe((vm: MovieViewModel) => subscriber.next(vm));\n    });\n  }\n}\n\n// Create an instance of the Zustand store engine\nfunction buildStoreEngine(\n  movieAPI: MoviesDataService\n): StoreApi<MovieViewModel> {\n  /**\n   * Calculate/build our derived/computed properties\n   */\n  const buildComputedFn = ({\n    allMovies,\n    filterBy,\n  }: Partial<MovieStateWithAPI>): MovieComputedState => {\n    const filteredMovies = computeMatchedMovies({ allMovies, filterBy });\n    return { filteredMovies };\n  };\n\n  /**\n   * Build a State/API store\n   */\n  const buildStoreFn = (set, get, store): MovieViewModel => {\n    set = computeWith<MovieViewModel>(buildComputedFn, store);\n\n    const data: MovieState = initState();\n    const api: MovieAPI = {\n      // Load movies based on searchBy and page\n      loadMovies: async (searchBy: string, page = 1): Promise<boolean> => {\n        const request$ = movieAPI.searchMovies<MovieItem[]>(searchBy, page);\n        const allMovies = await firstValueFrom(request$);\n\n        set({ allMovies, searchBy });\n        return true;\n      },\n      // Filter movies and highlight matching text\n      updateFilter: (filterBy: string) => {\n        set({ filterBy });\n      },\n      // Show all available movies\n      clearFilter: () => {\n        set({ filterBy: '' });\n      },\n    };\n\n    // For us, a store state is both 'data' + 'api'\n    return {\n      ...data,\n      ...api,\n      ...buildComputedFn(data),\n    };\n  };\n\n  // Return entire MovieViewModel\n  return create<MovieViewModel>()(\n    // prettier-ignore\n    devtools(\n      persist(\n        immer(buildStoreFn), \n        { name: 'movieSearch' }\n      ),\n      { name: 'movieSearch' }\n    )\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}