{"ast":null,"code":"/**\n * This is not middleware, but a utility function to create a store\n * with computed properties.\n */\nexport function computeWith(buildComputed, store) {\n  const originalSet = store.setState;\n  // Set state updates & updated computed fields\n  const setWithComputed = (update, replace) => {\n    originalSet(state => {\n      const updated = typeof update === 'object' ? update : update(state);\n      const computedState = buildComputed({\n        ...state,\n        ...updated\n      });\n      return {\n        ...updated,\n        ...computedState\n      };\n    }, replace);\n  };\n  /**\n   * create the store with the `set()` method tail-hooked to compute properties\n   */\n  store.setState = setWithComputed; // for external-to-store use\n  return store.setState;\n}","map":{"version":3,"mappings":"AAQA;;;;AAIA,OAAM,SAAUA,WAAW,CACzBC,aAA+B,EAC/BC,KAAkB;EAElB,MAAMC,WAAW,GAAGD,KAAK,CAACE,QAAQ;EAElC;EACA,MAAMC,eAAe,GAAG,CAACC,MAAM,EAAEC,OAAO,KAAI;IAC1CJ,WAAW,CAAEK,KAAQ,IAAI;MACvB,MAAMC,OAAO,GAAG,OAAOH,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,CAACE,KAAK,CAAC;MACnE,MAAME,aAAa,GAAGT,aAAa,CAAC;QAAE,GAAGO,KAAK;QAAE,GAAGC;MAAO,CAAE,CAAC;MAC7D,OAAO;QAAE,GAAGA,OAAO;QAAE,GAAGC;MAAa,CAAE;IACzC,CAAC,EAAEH,OAAO,CAAC;EACb,CAAC;EAED;;;EAGAL,KAAK,CAACE,QAAQ,GAAGC,eAAe,CAAC,CAAC;EAElC,OAAOH,KAAK,CAACE,QAAQ;AACvB","names":["computeWith","buildComputed","store","originalSet","setState","setWithComputed","update","replace","state","updated","computedState"],"sourceRoot":"","sources":["/project/zustand-angular-movie-search/src/app/data-access/utils/computed.ts"],"sourcesContent":["import { StoreApi } from 'zustand';\n\ntype SetState<T> = (\n  partial: T | Partial<T> | ((state: T) => T | Partial<T>),\n  replace?: boolean\n) => void;\ntype ComputedState<T> = (state: Partial<T>) => Partial<T>;\n\n/**\n * This is not middleware, but a utility function to create a store\n * with computed properties.\n */\nexport function computeWith<T extends object>(\n  buildComputed: ComputedState<T>,\n  store: StoreApi<T>\n): SetState<T> {\n  const originalSet = store.setState;\n\n  // Set state updates & updated computed fields\n  const setWithComputed = (update, replace) => {\n    originalSet((state: T) => {\n      const updated = typeof update === 'object' ? update : update(state);\n      const computedState = buildComputed({ ...state, ...updated });\n      return { ...updated, ...computedState };\n    }, replace);\n  };\n\n  /**\n   * create the store with the `set()` method tail-hooked to compute properties\n   */\n  store.setState = setWithComputed; // for external-to-store use\n\n  return store.setState;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}