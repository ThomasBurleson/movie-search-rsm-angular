{"ast":null,"code":"export const trackByID = m => m.poster_path;\nexport function initState() {\n  return {\n    searchBy: 'dogs',\n    allMovies: [],\n    filterBy: ''\n  };\n}","map":{"version":3,"mappings":"AAQA,OAAO,MAAMA,SAAS,GAAIC,CAAY,IAAKA,CAAC,CAACC,WAAW;AA2BxD,OAAM,SAAUC,SAAS;EACvB,OAAO;IACLC,QAAQ,EAAE,MAAM;IAChBC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE;GACX;AACH","names":["trackByID","m","poster_path","initState","searchBy","allMovies","filterBy"],"sourceRoot":"","sources":["/project/zustand-angular-movie-search/src/app/data-access/movies/movies.model.ts"],"sourcesContent":["import { Immutable } from 'immer';\n\nexport interface MovieItem {\n  title: string;\n  overview: string;\n  poster_path: string;\n}\n\nexport const trackByID = (m: MovieItem) => m.poster_path;\n\n/**\n * This is a simple API meant for use within the\n * UI layer html templates\n */\nexport interface MovieAPI {\n  updateFilter: (filterBy: string) => void;\n  loadMovies: (searchBy: string, page?: number) => void;\n  clearFilter: () => void;\n}\n\n/**\n * This state is serializable\n */\nexport interface MovieState {\n  searchBy: string;\n  filterBy: string;\n  allMovies: MovieItem[];\n}\n\nexport type MovieStateWithAPI = MovieState & MovieAPI;\n\nexport interface MovieComputedState {\n  filteredMovies: MovieItem[];\n}\n\nexport function initState(): MovieState {\n  return {\n    searchBy: 'dogs',\n    allMovies: [],\n    filterBy: '',\n  };\n}\n\nexport type MovieViewModel = MovieState & MovieAPI & MovieComputedState;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}