{"ast":null,"code":"export const computed = (buildState, computedProperties // register functions\n) => (set, get, api, ...b) => {\n  const setWithComputed = (update, replace) => {\n    set(state => {\n      const updated = typeof update === 'object' ? update : update(state);\n      const computedState = computedProperties({\n        ...state,\n        ...updated\n      });\n      return {\n        ...updated,\n        ...computedState\n      };\n    }, replace);\n  };\n  /**\n   * create the store with the `set()` method tail-hooked to compute properties\n   */\n  api.setState = setWithComputed; // for external-to-store use\n  return buildState(setWithComputed, get, api, ...b);\n};","map":{"version":3,"mappings":"AA2DA,OAAO,MAAMA,QAAQ,GACnB,CACEC,UAAU,EACVC,kBAAkB,CAAC;AAAA,KAErB,CAACC,GAAG,EAAEC,GAAG,EAAEC,GAAG,EAAE,GAAGC,CAAC,KAAI;EACtB,MAAMC,eAAe,GAAG,CAACC,MAAM,EAAEC,OAAO,KAAI;IAC1CN,GAAG,CAAEO,KAAK,IAAI;MACZ,MAAMC,OAAO,GAAG,OAAOH,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,CAACE,KAAK,CAAC;MACnE,MAAME,aAAa,GAAGV,kBAAkB,CAAC;QAAE,GAAGQ,KAAK;QAAE,GAAGC;MAAO,CAAE,CAAC;MAClE,OAAO;QAAE,GAAGA,OAAO;QAAE,GAAGC;MAAa,CAAE;IACzC,CAAC,EAAEH,OAAO,CAAC;EACb,CAAC;EAED;;;EAIAJ,GAAG,CAACQ,QAAQ,GAAGN,eAAe,CAAC,CAAC;EAChC,OAAQN,UAAkB,CAACM,eAAe,EAAEH,GAAG,EAAEC,GAAG,EAAE,GAAGC,CAAC,CAAC;AAC7D,CAAC","names":["computed","buildState","computedProperties","set","get","api","b","setWithComputed","update","replace","state","updated","computedState","setState"],"sourceRoot":"","sources":["/project/zustand-angular-movie-search/src/app/data-access/utils/computed.middleware.ts"],"sourcesContent":["import {\n  StateCreator,\n  StoreApi,\n  GetState,\n  SetState,\n  StoreMutatorIdentifier,\n} from 'zustand';\n\n// type Compute = <\n//   T,\n//   Mps extends [StoreMutatorIdentifier, unknown][] = [],\n//   Mcs extends [StoreMutatorIdentifier, unknown][] = []\n// >(\n//   initializer: StateCreator<T, [...Mps, ['zustand/immer', never]], Mcs>\n// ) => StateCreator<T, Mps, [['zustand/immer', never], ...Mcs]>;\n\n// type State = Object;\n// export declare type ComputedState<S extends State> = (state: S) => State;\n\n/**\n * Middleware code to support Zustand computed/derived properties\n *\n * @see zustand-middleware-computed-state\n * @note This fixes TS compile issues in current version.\n */\n// export const computed =\n//   <S extends State, C extends State>(\n//     buildStoreFn: StateCreator<S>,\n//     buildComputedFn: (state: S) => C\n//   ) =>\n// (\n//   set: SetState<S>,\n//   get: GetState<S>,\n//   api: StoreApi<S>,\n//   mutations: []\n// ): S & C => {\n//   const setWithComputed: SetState<S> = (update, replace) => {\n//     set((state) => {\n//       const updated = typeof update === 'object' ? update : update(state);\n//       const computedState = buildComputedFn({ ...state, ...updated });\n//       return { ...updated, ...computedState };\n//     }, replace);\n//   };\n//   api.setState = setWithComputed; // for external-to-store use\n//   const state = buildStoreFn(setWithComputed, get, api, mutations);\n\n//   return { ...state, ...buildComputedFn(state) };\n// };\n\ntype Computed = <\n  StateT extends object = object,\n  ComputedT extends object = object,\n  Mps extends [StoreMutatorIdentifier, unknown][] = [],\n  Mcs extends [StoreMutatorIdentifier, unknown][] = []\n>(\n  stateCreator: StateCreator<StateT, Mps, Mcs>,\n  computedCalculator: (state: StateT) => ComputedT\n) => StateCreator<StateT & ComputedT, Mps, Mcs>;\n\nexport const computed: Computed =\n  (\n    buildState,\n    computedProperties // register functions\n  ) =>\n  (set, get, api, ...b) => {\n    const setWithComputed = (update, replace) => {\n      set((state) => {\n        const updated = typeof update === 'object' ? update : update(state);\n        const computedState = computedProperties({ ...state, ...updated });\n        return { ...updated, ...computedState };\n      }, replace);\n    };\n\n    /**\n     * create the store with the `set()` method tail-hooked to compute properties\n     */\n\n    api.setState = setWithComputed; // for external-to-store use\n    return (buildState as any)(setWithComputed, get, api, ...b);\n  };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}